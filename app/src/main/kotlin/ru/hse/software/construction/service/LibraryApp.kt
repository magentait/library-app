/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ru.hse.software.construction.service

import ru.hse.software.construction.model.Book
import ru.hse.software.construction.controller.LibraryController
import ru.hse.software.construction.repository.LibraryRepository
import ru.hse.software.construction.repository.JsonLibraryApp
import ru.hse.software.construction.repository.UserRepository


fun main() {
    val libraryController = LibraryController()

    // Получение путей для хранения библиотеки и аккаунтов
    println("Введите путь для хранения библиотеки книг (например, '/Users/david/LibraryApp'): ")
    val libraryPath = readlnOrNull() ?: "/Users/david/LibraryApp"
    println("Введите название файла для хранения библиотеки книг (например, 'books.json'): ")
    val libraryFileName = readlnOrNull() ?: "books.json"

    if (!libraryController.isFilePathValid(libraryPath, libraryFileName)) {
        return
    }

    println("Введите путь для хранения аккаунтов (например, '/Users/david/LibraryApp'): ")
    val usersPath = readlnOrNull() ?: "/Users/david/LibraryApp"
    println("Введите название файла для хранения аккаунтов (например, 'users.json'): ")
    val usersFileName = readlnOrNull() ?: "users.json"

    if (!libraryController.isFilePathValid(usersPath, usersFileName)) {
        return
    }

    val library = JsonLibraryApp(LibraryRepository(libraryPath, libraryFileName), mutableListOf())
    val userRepository = UserRepository(usersPath, usersFileName)
    val registrar = SimpleRegistrar(userRepository, mutableListOf())
    val authenticator = SimpleAuthenticator(userRepository, mutableListOf())

    var isLoggedIn = false

    while (true) {
        println("Меню авторизации:")
        println("1. Регистрация")
        println("2. Аутентификация")
        println("0. Выход")

        print("Выберите действие: ")
        when (readlnOrNull()?.toIntOrNull()) {
            1 -> {
                println("Введите логин: ")
                var newUsername = readlnOrNull() ?: continue

                while (!registrar.isUsernameAvailable(newUsername)) {
                    println("Этот логин занят! Если этот аккаунт принадлежит Вам, попробуйте зайти в него.")
                    println("Введите логин: ")
                    newUsername = readlnOrNull() ?: continue
                }

                println("Введите пароль (минимум 8 символов): ")
                var newPassword = readlnOrNull() ?: continue

                while (!registrar.isPasswordStrong((newPassword))) {
                    println("Этот пароль слишком слабый! Попробуйте снова.")
                    println("Введите пароль (минимум 8 символов): ")
                    newPassword = readlnOrNull() ?: continue
                }

                registrar.register(newUsername, newPassword)
                println("Регистрация прошла успешно.")
                isLoggedIn = true
            }
            2 -> {
                println("Введите логин: ")
                var inputUsername = readlnOrNull() ?: continue

                while (registrar.isUsernameAvailable(inputUsername)) {
                    println("Такого аккаунта не существует! Попробуйте снова.")
                    println("Введите логин: ")
                    inputUsername = readlnOrNull() ?: continue
                }

                println("Введите пароль: ")
                var inputPassword = readlnOrNull() ?: continue

                while (!authenticator.authenticate(inputUsername, inputPassword)) {
                    println("Некорректный пароль! Попробуйте снова.")
                    println("Введите пароль: ")
                    inputPassword = readlnOrNull() ?: continue
                }

                println("Аутентификация прошла успешно.")
                isLoggedIn = true
            }
            0 -> {
                println("Выход из программы")
                return
            }
            else -> {
                println("Некорректный выбор")
            }
        }

        if (isLoggedIn) {
            while (true) {
                println("Меню библиотеки:")
                println("1. Добавить книгу")
                println("2. Удалить книгу")
                println("3. Просмотреть книги")
                println("4. Поиск книги по названию")
                println("0. Выход")

                print("Выберите действие: ")
                when (readlnOrNull()?.toIntOrNull()) {
                    1 -> {
                        println("Введите ID книги: ")
                        val id = readlnOrNull()?.toIntOrNull() ?: continue
                        println("Введите название книги: ")
                        val title = readlnOrNull() ?: continue
                        println("Введите автора книги: ")
                        val author = readlnOrNull() ?: continue

                        library.addBook(Book(id, title, author))
                    }
                    2 -> {
                        println("Введите название книги для удаления: ")
                        val searchTitle = readlnOrNull() ?: continue
                        val foundBook = library.findBookByTitle(searchTitle)
                        if (foundBook == null) {
                            println("Книга с названием \"$searchTitle\" не найдена.\n")
                            continue
                        }
                        library.removeBook(searchTitle)
                        println("Книга успешно удалена.\n")
                    }
                    3 -> {
                        println("Список книг:")
                        library.getAllBooks().forEach { println("${it.id}: ${it.title} by ${it.author}") }
                        println("\n")
                    }
                    4 -> {
                        println("Введите название книги для поиска: ")
                        val searchTitle = readlnOrNull() ?: continue
                        val foundBook = library.findBookByTitle(searchTitle)
                        if (foundBook != null) {
                            println("Найдена книга \"$searchTitle\".\n")
                        } else {
                            println("Книга с названием \"$searchTitle\" не найдена.\n")
                        }
                    }
                    0 -> {
                        println("Выход из программы.")
                        return
                    }
                    else -> println("Некорректный выбор.")
                }
            }
        }
    }
}
